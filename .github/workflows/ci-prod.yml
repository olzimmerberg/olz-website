on:
  push:
    branches:
      - main

name: CI:prod

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:

  take-screenshots:
    strategy:
      matrix:
        block: [0, 1, 2]
    name: Take screenshots (${{ matrix.block }})
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema_test
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    - name: Install symfony-cli
      run: |
        echo 'deb [trusted=yes] https://repo.symfony.com/apt/ /' | sudo tee /etc/apt/sources.list.d/symfony-cli.list; sudo apt update; sudo apt install symfony-cli
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install dependencies
      run: composer install --dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Take Screenshots
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        MOZ_HEADLESS: 1
      run: composer take_screenshots -- ${{ matrix.block }}
    - uses: actions/upload-artifact@v1
      with:
        name: prod-screenshots
        path: ./screenshots

  run-tests:
    strategy:
      matrix:
        php-version: ['8.1'] # 8.1 is active on hosting
    name: Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema_test
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install dependencies
      run: composer install --dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Code style check
      run: composer fixdiff
    - name: Lint JavaScript & TypeScript
      run: npm run eslint
    - name: Lint CSS & SCSS
      run: npm run stylelint
    - name: Compile TypeScript
      run: npm run tsc
    - name: Jest Unit Tests
      run: composer jest_tests -- --runInBand
    - name: PHP Unit Tests
      run: composer unit_tests; cat ./php-coverage/coverage.txt || echo "no coverage!"
    - name: PHP Integration Tests
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
      run: composer integration_tests; cat ./php-coverage/coverage.txt || echo "no coverage!"
    - name: Check database migrations
      run: composer check_migrations
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v2
    - name: Upload GitHub Pages
      uses: actions/upload-pages-artifact@v1
      with:
        path: './docs'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1

  deploy-prod:
    name: Deploy to olzimmerberg.ch
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install dependencies
      run: composer install --no-dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Deploy
      env:
        USERNAME: ${{ secrets.PROD_HOSTTECH_FTP_USERNAME }}
        PASSWORD: ${{ secrets.PROD_HOSTTECH_FTP_PASSWORD }}
      run: php ./Deploy.php --target=hosttech --environment=prod --username="$USERNAME"

  upload-screenshots:
    name: Upload screenshots to olzimmerberg.ch
    runs-on: ubuntu-latest
    needs: [deploy-prod, take-screenshots]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: prod-screenshots
        path: ./screenshots
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install dependencies
      run: composer install --no-dev --prefer-dist
    - name: Upload over FTPS
      env:
        USERNAME: ${{ secrets.PROD_HOSTTECH_FTP_USERNAME }}
        PASSWORD: ${{ secrets.PROD_HOSTTECH_FTP_PASSWORD }}
      run: php ./ci/screenshot-upload.php --target=hosttech --environment=prod --username="$USERNAME"
