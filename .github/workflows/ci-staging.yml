on:
  push:
    branches-ignore:
      - main

name: CI:staging

jobs:

  take-screenshots:
    strategy:
      matrix:
        block: [0, 1, 2]
    name: Take screenshots (${{ matrix.block }})
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v3
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    - name: Install symfony-cli
      # https://symfony.com/download
      run: |
        curl -sS https://get.symfony.com/cli/installer | bash; mv /home/runner/.symfony5/bin/symfony /usr/local/bin/symfony
    - name: Get PHP (composer) cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache PHP (composer) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install PHP (composer) dependencies
      run: composer install --dev --prefer-dist --optimize-autoloader
    - name: Get JavaScript (npm) cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Cache JavaScript (npm) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript (npm) dependencies
      run: npm install
    - name: Take Screenshots
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        MOZ_HEADLESS: 1
      run: composer take_screenshots -- ${{ matrix.block }}
    - uses: actions/upload-artifact@v1
      with:
        name: test-screenshots
        path: ./screenshots

  run-screenshot-tests:
    name: Screenshot tests
    runs-on: ubuntu-latest
    needs: take-screenshots
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v1
      with:
        name: test-screenshots
        path: ./ci/screenshots
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    - name: Test screenshots for modifications
      run: cd ./ci; php ./screenshot-modifications.php

  run-tests:
    strategy:
      matrix:
        php-version: ['8.1'] # 8.1 is active on hosting
    name: Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema_test
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v3
    - uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
    - name: Get PHP (composer) cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache PHP (composer) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install PHP (composer) dependencies
      run: composer install --dev --prefer-dist --optimize-autoloader
    - name: Get JavaScript (npm) cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Cache JavaScript (npm) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript (npm) dependencies
      run: npm install
    - name: Cache other caches
      uses: actions/cache@v3
      with:
        path: |
          *.cache
        key: ${{ runner.os }}-other-${{ hashFiles('*.cache') }}
        restore-keys: |
          ${{ runner.os }}-other-
    - name: Code style check
      run: composer fixdiff
    - name: Lint JavaScript & TypeScript
      run: npm run eslint
    - name: Lint CSS & SCSS
      run: npm run stylelint
    - name: Compile TypeScript
      run: npm run tsc
    - name: Jest Unit Tests
      run: composer jest_tests -- --runInBand
    - name: PHP Unit Tests
      run: composer unit_tests; cat ./php-coverage/coverage.txt || echo "no coverage!"
    - name: PHP Integration Tests
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
      run: composer integration_tests; cat ./php-coverage/coverage.txt || echo "no coverage!"
    - name: Check database migrations
      run: composer check_migrations

  deploy-staging:
    name: Deploy to staging.olzimmerberg.ch
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    - name: Get PHP (composer) cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache PHP (composer) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install PHP (composer) dependencies
      run: composer install --no-dev --prefer-dist --optimize-autoloader
    - name: Get JavaScript (npm) cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Cache JavaScript (npm) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript (npm) dependencies
      run: npm install
    - name: Deploy
      env:
        USERNAME: ${{ secrets.STAGING_HOSTTECH_FTP_USERNAME }}
        PASSWORD: ${{ secrets.STAGING_HOSTTECH_FTP_PASSWORD }}
      run: php ./Deploy.php --target=hosttech --environment=staging --username="$USERNAME"

  upload-screenshots:
    name: Upload screenshots to staging.olzimmerberg.ch
    runs-on: ubuntu-latest
    needs: [deploy-staging, take-screenshots]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v1
      with:
        name: test-screenshots
        path: ./screenshots
    - name: Get PHP (composer) cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache PHP (composer) dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install PHP (composer) dependencies
      run: composer install --no-dev --prefer-dist --optimize-autoloader
    - name: Upload over FTPS
      env:
        USERNAME: ${{ secrets.STAGING_HOSTTECH_FTP_USERNAME }}
        PASSWORD: ${{ secrets.STAGING_HOSTTECH_FTP_PASSWORD }}
      run: php ./ci/screenshot-upload.php --target=hosttech --environment=staging --username="$USERNAME"
