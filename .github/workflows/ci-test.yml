on:
  push:
    branches-ignore:
      - master
name: CI:test
jobs:

  take-screenshots:
    strategy:
      matrix:
        block: [0, 1, 2]
    name: Take screenshots (${{ matrix.block }})
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install dependencies
      run: composer install --dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Take Screenshots
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        MOZ_HEADLESS: 1
      run: ./take-screenshots.sh ${{ matrix.block }}
    - uses: actions/upload-artifact@v1
      with:
        name: test-screenshots
        path: ./screenshots

  run-screenshot-tests:
    name: Screenshot tests
    runs-on: ubuntu-latest
    needs: take-screenshots
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: test-screenshots
        path: ./ci/screenshots
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
    - name: Test screenshots for modifications
      run: cd ./ci; php ./screenshot-modifications.php

  run-tests:
    strategy:
      matrix:
        php-version: ['7.4'] # 7.4 is active on hosting
    name: Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: db-username
          MYSQL_PASSWORD: db-password
          MYSQL_DATABASE: db-schema
          MYSQL_ROOT_PASSWORD: db-password
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composerdev-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composerdev-
    - name: Install dependencies
      run: composer install --dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Lint PHP
      run: cd ./ci; ./php-lint.sh
    - name: Indented with spaces
      run: cd ./ci; ./php-indent-spaces.sh
    - name: Code style check
      run: cd ./ci; ./php-code-style.sh
    - name: Lint JavaScript & TypeScript
      run: npm run eslint
    - name: PHP Unit Tests
      run: ./unit-test.sh; cat ./php-coverage/coverage.txt
    - name: PHP Integration Tests
      env:
        DB_PORT: ${{ job.services.mariadb.ports[3306] }}
      run: ./integration-test.sh; cat ./php-coverage/coverage.txt
    - name: Check database migrations
      run: cd ./ci; ./check-migrations.sh

  deploy-test:
    name: Deploy to test.olzimmerberg.ch
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install dependencies
      run: composer install --no-dev --prefer-dist
    - name: Get npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install JavaScript dependencies
      run: npm install
    - name: Build deployment
      run: ./build-deployment.sh
    - name: Deploy over SFTP
      env:
        SSHPASS: ${{ secrets.TEST_FTP_PASSWORD }}
      run: ./deploy.sh hoststar-test

  upload-screenshots:
    name: Upload screenshots to test.olzimmerberg.ch
    runs-on: ubuntu-latest
    needs: [deploy-test, take-screenshots]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: test-screenshots
        path: ./screenshots
    - name: Upload over SFTP
      env:
        SSHPASS: ${{ secrets.TEST_FTP_PASSWORD }}
      run: ./deploy.sh hoststar-test ./ci/ftp-upload-screenshots
